{"ast":null,"code":"var _jsxFileName = \"/home/dev/BurgerApp/src/pages/Signup.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { UserContext } from '../App';\nimport { useContext, useState } from \"react\";\nimport Burger from '../components/Burger';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Signup = () => {\n  _s();\n\n  // logic we need to implement is to set context is user logged in or not and access it in \\\n  //child components to render different pages\n  const email = \"text@test.com\";\n  const password = \"text123*\";\n  const [user, setUser] = useState([{\n    email: \"\",\n    password: \"\"\n  }]);\n  const {\n    isLogin,\n    setisLogin\n  } = useContext(UserContext);\n\n  function onSubmit(fname) {\n    if (user.email === email && user.password === password) {\n      setisLogin(true);\n    } else {\n      console.log(\"false\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLogin ? /*#__PURE__*/_jsxDEV(Burger, {\n      data: isLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Please, log in!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 46\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Email:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: event => {\n          setUser({ ...user,\n            email: event.target.value\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Password:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        onChange: event => {\n          setUser({ ...user,\n            password: event.target.value\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: isLogin,\n        onClick: () => on(item.ingredient),\n        children: [\"Remove \", item.ingredient, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n};\n\n_s(Signup, \"2A9HnUiC5OH8lSee42nMON6OPJc=\");\n\n_c = Signup;\nexport default Signup;\n\nvar _c;\n\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"names":["React","UserContext","useContext","useState","Burger","Signup","email","password","user","setUser","isLogin","setisLogin","onSubmit","fname","console","log","event","target","value","on","item","ingredient"],"sources":["/home/dev/BurgerApp/src/pages/Signup.js"],"sourcesContent":["import React from 'react';\nimport { UserContext } from '../App';\nimport { useContext ,useState} from \"react\";\nimport Burger from '../components/Burger';\nconst Signup = () => {\n  // logic we need to implement is to set context is user logged in or not and access it in \\\n  //child components to render different pages\n  const email= \"text@test.com\";\n  const password= \"text123*\";\n  const [user, setUser] = useState([\n    {\n    email: \"\",\n    password: \"\"\n    }\n  ]);\n  const {isLogin,setisLogin} = useContext(UserContext);\n  function onSubmit(fname) {\n    if(user.email === email && user.password === password){\n      setisLogin(true)\n    }\n    else\n    {\n      console.log(\"false\");\n    }\n  }\n\n  return (\n    <>{isLogin ? <Burger data={isLogin}/>: <><h1>Please, log in!</h1>\n\n    <label>Email:</label>\n    <input\n      type=\"text\"\n      onChange={(event) => {\n        setUser({...user, email: event.target.value});\n      }}\n    />\n    <label>Password:</label>\n    <input\n      type=\"password\"\n      onChange={(event) => {\n        setUser({...user, password: event.target.value})\n      }}\n    />\n      <button disabled={isLogin} onClick={() => on(item.ingredient)}>Remove {item.ingredient} </button>\n   </>}\n    </>\n  )\n}\nexport default Signup;\n\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;;AACA,MAAMC,MAAM,GAAG,MAAM;EAAA;;EACnB;EACA;EACA,MAAMC,KAAK,GAAE,eAAb;EACA,MAAMC,QAAQ,GAAE,UAAhB;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,CAC/B;IACAG,KAAK,EAAE,EADP;IAEAC,QAAQ,EAAE;EAFV,CAD+B,CAAD,CAAhC;EAMA,MAAM;IAACG,OAAD;IAASC;EAAT,IAAuBT,UAAU,CAACD,WAAD,CAAvC;;EACA,SAASW,QAAT,CAAkBC,KAAlB,EAAyB;IACvB,IAAGL,IAAI,CAACF,KAAL,KAAeA,KAAf,IAAwBE,IAAI,CAACD,QAAL,KAAkBA,QAA7C,EAAsD;MACpDI,UAAU,CAAC,IAAD,CAAV;IACD,CAFD,MAIA;MACEG,OAAO,CAACC,GAAR,CAAY,OAAZ;IACD;EACF;;EAED,oBACE;IAAA,UAAGL,OAAO,gBAAG,QAAC,MAAD;MAAQ,IAAI,EAAEA;IAAd;MAAA;MAAA;MAAA;IAAA,QAAH,gBAA6B;MAAA,wBAAE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAF,eAEvC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFuC,eAGvC;QACE,IAAI,EAAC,MADP;QAEE,QAAQ,EAAGM,KAAD,IAAW;UACnBP,OAAO,CAAC,EAAC,GAAGD,IAAJ;YAAUF,KAAK,EAAEU,KAAK,CAACC,MAAN,CAAaC;UAA9B,CAAD,CAAP;QACD;MAJH;QAAA;QAAA;QAAA;MAAA,QAHuC,eASvC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QATuC,eAUvC;QACE,IAAI,EAAC,UADP;QAEE,QAAQ,EAAGF,KAAD,IAAW;UACnBP,OAAO,CAAC,EAAC,GAAGD,IAAJ;YAAUD,QAAQ,EAAES,KAAK,CAACC,MAAN,CAAaC;UAAjC,CAAD,CAAP;QACD;MAJH;QAAA;QAAA;QAAA;MAAA,QAVuC,eAgBrC;QAAQ,QAAQ,EAAER,OAAlB;QAA2B,OAAO,EAAE,MAAMS,EAAE,CAACC,IAAI,CAACC,UAAN,CAA5C;QAAA,sBAAuED,IAAI,CAACC,UAA5E;MAAA;QAAA;QAAA;QAAA;MAAA,QAhBqC;IAAA;EAAvC,iBADF;AAqBD,CA3CD;;GAAMhB,M;;KAAAA,M;AA4CN,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}