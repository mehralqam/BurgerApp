{"ast":null,"code":"var _jsxFileName = \"/home/dev/practice-app/src/components/Burger.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Burger() {\n  _s();\n\n  const [items, setItems] = useState([{\n    id: 0,\n    ingredient: \"meat\",\n    price: 100,\n    quantity: 0\n  }, {\n    id: 1,\n    ingredient: \"cheese\",\n    price: 50,\n    quantity: 0\n  }]);\n\n  function decrementCount() {\n    const updatedItems = [...users, // now you can add a new object to add to the array\n    {\n      // using the length of the array for a unique id\n      id: users.length + 1,\n      // adding a new user name\n      name: \"Steve\",\n      // with a type of member\n      type: \"member\"\n    }];\n  }\n\n  function incrementCount() {\n    setCount(count + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: items.map(item =>\n      /*#__PURE__*/\n      // display a <div> element with the user.name and user.type\n      // parent element needs to have a unique key\n      _jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: item.ingredient\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: item.quantity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: item.price\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"burgerChoice\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decrementQuantity,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incrementQuantity,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Burger, \"n7l7XPJFTEuK3fZ1lidDBel46uw=\");\n\n_c = Burger;\nexport default Burger;\n\nvar _c;\n\n$RefreshReg$(_c, \"Burger\");","map":{"version":3,"names":["React","useState","ReactDOM","Burger","items","setItems","id","ingredient","price","quantity","decrementCount","updatedItems","users","length","name","type","incrementCount","setCount","count","map","item","decrementQuantity","incrementQuantity"],"sources":["/home/dev/practice-app/src/components/Burger.js"],"sourcesContent":["import React from 'react';\nimport { useState } from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\n\nfunction Burger() {\n  const [items, setItems] = useState([\n    {\n      id: 0,\n      ingredient: \"meat\",\n      price: 100,\n      quantity: 0,\n    },\n    {\n      id: 1,\n      ingredient: \"cheese\",\n      price: 50,\n      quantity: 0,\n    },\n  ]);\n  function decrementCount(){\n      const updatedItems =  [\n        ...users,\n        // now you can add a new object to add to the array\n        {\n          // using the length of the array for a unique id\n          id: users.length + 1,\n          // adding a new user name\n          name: \"Steve\",\n          // with a type of member\n          type: \"member\"\n        }\n      ];\n    }\n\n    function incrementCount(){\n      setCount(count + 1)\n    }\n  return (\n    <div className=\"App\">\n      <ul>\n        {/* map over the users array */}\n        {items.map((item) => (\n          // display a <div> element with the user.name and user.type\n          // parent element needs to have a unique key\n          <div key={item.id}>\n            <p>{item.ingredient}</p>\n            <p>{item.quantity}</p>\n            <p>{item.price}</p>\n          </div>\n        ))}\n      </ul>\n      <div className=\"burgerChoice\">\n        <button onClick={decrementQuantity}>Add</button>\n        <button onClick={incrementQuantity}>Remove</button>\n      </div>\n    </div>\n  );\n}\nexport default Burger;\n\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,kBAArB;;;AAGA,SAASC,MAAT,GAAkB;EAAA;;EAChB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,CACjC;IACEK,EAAE,EAAE,CADN;IAEEC,UAAU,EAAE,MAFd;IAGEC,KAAK,EAAE,GAHT;IAIEC,QAAQ,EAAE;EAJZ,CADiC,EAOjC;IACEH,EAAE,EAAE,CADN;IAEEC,UAAU,EAAE,QAFd;IAGEC,KAAK,EAAE,EAHT;IAIEC,QAAQ,EAAE;EAJZ,CAPiC,CAAD,CAAlC;;EAcA,SAASC,cAAT,GAAyB;IACrB,MAAMC,YAAY,GAAI,CACpB,GAAGC,KADiB,EAEpB;IACA;MACE;MACAN,EAAE,EAAEM,KAAK,CAACC,MAAN,GAAe,CAFrB;MAGE;MACAC,IAAI,EAAE,OAJR;MAKE;MACAC,IAAI,EAAE;IANR,CAHoB,CAAtB;EAYD;;EAED,SAASC,cAAT,GAAyB;IACvBC,QAAQ,CAACC,KAAK,GAAG,CAAT,CAAR;EACD;;EACH,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,wBACE;MAAA,UAEGd,KAAK,CAACe,GAAN,CAAWC,IAAD;MAAA;MACT;MACA;MACA;QAAA,wBACE;UAAA,UAAIA,IAAI,CAACb;QAAT;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAA,UAAIa,IAAI,CAACX;QAAT;UAAA;UAAA;UAAA;QAAA,QAFF,eAGE;UAAA,UAAIW,IAAI,CAACZ;QAAT;UAAA;UAAA;UAAA;QAAA,QAHF;MAAA,GAAUY,IAAI,CAACd,EAAf;QAAA;QAAA;QAAA;MAAA,QAHD;IAFH;MAAA;MAAA;MAAA;IAAA,QADF,eAaE;MAAK,SAAS,EAAC,cAAf;MAAA,wBACE;QAAQ,OAAO,EAAEe,iBAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAQ,OAAO,EAAEC,iBAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QAbF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAoBD;;GArDQnB,M;;KAAAA,M;AAsDT,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}